apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: endpoints.multicloud.ibm.com
spec:
  group: multicloud.ibm.com
  names:
    kind: Endpoint
    listKind: EndpointList
    plural: endpoints
    singular: endpoint
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          type: object
        status:
          type: object
  version: v1beta1
  versions:
  - name: v1beta1
    served: true
    storage: true
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: multicluster-endpoint
spec: {}
status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: endpoint-operator
  namespace: multicluster-endpoint
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: endpoint-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: endpoint-operator
  namespace: multicluster-endpoint
---
apiVersion: v1
data:
  .dockerconfigjson: |
    ewogICJhdXRocyI6IHsKICAgICJxdWF5LmlvIjogewogICAgICAiYXV0aCI6ICJiMmRzYjJzNlFUVXJhVFJQVFhoMVlVNXdVbGRLYVRoQ05UUlFRVlV3Y2poc2MwMUlhVVJ4WkRSNmMyOUxZUzl5VVZoVmNUWmxWRTgyWlhSNEswWXJTVkYzWTFOUlRnPT0iLAogICAgICAiZW1haWwiOiAiIgogICAgfQogIH0KfQ==
kind: Secret
metadata:
  creationTimestamp: null
  name: multiclusterhub-operator-pull-secret
  namespace: multicluster-endpoint
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  kubeconfig: |
    
kind: Secret
metadata:
  creationTimestamp: null
  name: klusterlet-bootstrap
  namespace: multicluster-endpoint
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  name: endpoint-operator
  namespace: multicluster-endpoint
spec:
  selector:
    matchLabels:
      name: endpoint-operator
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: endpoint-operator
    spec:
      containers:
      - env:
        - name: WATCH_NAMESPACE
        - name: OPERATOR_NAME
          value: endpoint-operator
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: IMAGE_TAG_POSTFIX
          value: -SNAPSHOT-2020-03-31-02-16-43
        image: quay.io/open-cluster-management/endpoint-operator:1.0.0-SNAPSHOT-2020-03-31-02-16-43
        imagePullPolicy: Always
        name: endpoint-operator
        resources: {}
      imagePullSecrets:
      - name: multiclusterhub-operator-pull-secret
      serviceAccountName: endpoint-operator
status: {}
---
apiVersion: multicloud.ibm.com/v1beta1
kind: Endpoint
metadata:
  creationTimestamp: null
  name: endpoint
  namespace: multicluster-endpoint
spec:
  applicationManager:
    enabled: true
  certPolicyController:
    enabled: true
  cisController:
    enabled: false
  clusterLabels:
    cloud: auto-detect
    vendor: auto-detect
  clusterName: staging-aws
  clusterNamespace: staging-aws
  connectionManager: {}
  iamPolicyController:
    enabled: true
  imagePullSecret: multiclusterhub-operator-pull-secret
  imageRegistry: quay.io/open-cluster-management
  policyController:
    enabled: true
  searchCollector:
    enabled: true
  serviceRegistry:
    dnsSuffix: mcm.svc
    enabled: true
    plugins: kube-service
  version: 1.0.0
status: {}
